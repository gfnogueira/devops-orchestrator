pipeline {
    agent {
        kubernetes {
            label 'devops-agent'
            defaultContainer 'jnlp'
            serviceAccount 'jenkins'
        }
    }

    environment {
        JENKINS_HOME_AGENT = '/home/jenkins/agent/workspace/infra-policy-guard/'
        PROJECT_BASE       = 'opentofu/environments/infra-cluster'
        POLICY_PATH        = "${JENKINS_HOME_AGENT}/${PROJECT_BASE}/policy"
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Discover Terraform Projects') {
            steps {
                script {
                    env.PROJECT_DIRS = sh(
                        script: "find ${env.PROJECT_BASE} -mindepth 1 -maxdepth 1 -type d -exec test -e '{}/main.tf' ';' -print",
                        returnStdout: true
                    ).trim().split("\n")
                    echo "Found Terraform directories:\n${env.PROJECT_DIRS.join('\n')}"
                }
            }
        }

        stage('Validate Each Terraform Project') {
            steps {
                script {
                    def projectDirs = sh(
                        script: "find ${env.PROJECT_BASE} -mindepth 1 -maxdepth 1 -type d -exec test -e '{}/main.tf' ';' -print",
                        returnStdout: true
                    ).trim().split("\n")

                    for (projectDir in projectDirs) {
                        echo "\nüîç Running validations for: ${projectDir}"

                        dir(projectDir) {
                            stage("1: TFLINT - ${projectDir}") {
                                sh '''
                                    echo "[TFLINT] Initializing and linting..."
                                    tflint --init
                                    tflint --recursive
                                '''
                            }

                            stage("2: Terraform Plan - ${projectDir}") {
                                sh '''
                                    echo "[TOFU] Init and plan..."
                                    tofu init -input=false
                                    tofu plan -out=tfplan -input=false || true
                                    tofu show -json tfplan > tfplan.json

                                    echo "[TOFU] Resources in plan:"
                                    jq '.planned_values.root_module.resources // [] | .[] | {type: .type, name: .name}' tfplan.json || echo "‚ö†Ô∏è No resources found."
                                '''
                            }

                            stage("3: Conftest Policy Check - ${projectDir}") {
                                sh '''
                                    echo "[CONFTEST] Summary (table format):"
                                    conftest test tfplan.json --policy ${POLICY_PATH} --output table || true

                                    echo "[CONFTEST] Trace (debug):"
                                    conftest test tfplan.json --policy ${POLICY_PATH} --trace || true
                                '''
                            }

                            stage("4: Terraform Docs - ${projectDir}") {
                                sh '''
                                    terraform-docs markdown table . > /tmp/generated.md

                                    if [ -f README.md ]; then
                                        if ! diff -q /tmp/generated.md README.md; then
                                            echo "‚ùå README.md is outdated. Please update it using terraform-docs."
                                            exit 1
                                        else
                                            echo "‚úÖ README.md is up-to-date."
                                        fi
                                    else
                                        echo "‚ö†Ô∏è No README.md found."
                                    fi
                                '''
                            }

                            stage("5: TFSec - ${projectDir}") {
                                sh '''
                                    echo "[TFSEC] Scanning..."
                                    tfsec . || true
                                '''
                            }

                            //stage("6: Checkov - ${projectDir}") {
                            //    sh '''
                            //        echo "[CHECKOV] Running..."
                            //        checkov -d . --quiet || true
                            //    '''
                            //}
                            stage("6: Checkov - ${projectDir}") {
                                catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                                    sh '''
                                        echo "[CHECKOV] Running..."
                                        checkov -d . || {
                                          echo "‚ùå Checkov found issues."
                                          exit 1
                                        }
                                        echo "‚úÖ Checkov passed."
                                    '''
                                }
                            }

                            stage("7: OPA Eval - ${projectDir}") {
                                sh '''
                                    echo "[OPA] Evaluating policies..."
                                    opa eval --format=pretty --input tfplan.json --data ${POLICY_PATH} "data.main.deny" || true
                                '''
                            }

                            echo "‚úÖ Finished: ${projectDir}\n"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ All Terraform validations passed!'
        }
        failure {
            echo '‚ùå One or more validations failed!'
        }
    }
}