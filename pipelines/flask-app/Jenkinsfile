pipeline {
    agent {
        kubernetes {
            serviceAccount 'jenkins'
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
  - name: devops-agent
    image: gfnogueira/jenkins-devops-agent:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
            '''
        }
    }

    triggers {
        pollSCM('H/2 * * * *')  // Poll Git a cada 2 minutos
    }

    environment {
        DOCKER_REGISTRY = 'docker.io'
        IMAGE_NAME = 'gfnogueira/flask-devops-app'
        APP_NAMESPACE = 'developer'
        GIT_REPO = 'https://github.com/gfnogueira/devops-orchestrator-flask-app.git'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Flask app: ${GIT_REPO}"
                    git branch: 'main', url: "${GIT_REPO}"
                    echo "Repository cloned successfully"
                    env.BRANCH_NAME = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                    echo "BRANCH_NAME detectada: ${env.BRANCH_NAME}"
                }
            }
        }

        stage('Show Branch Name') {
            steps {
                script {
                    echo "Branch detectada pelo Jenkins: ${env.BRANCH_NAME}"
                }
            }
        }

        stage('Install Dependencies & Quality Tools') {
            steps {
                container('devops-agent') {
                    script {
                        echo "Installing Python dependencies and quality tools..."
                        sh '''
                            pwd
                            ls -la
                            python3 -m venv venv
                            . venv/bin/activate
                            pip3 install --upgrade pip setuptools
                            pip3 install --force-reinstall certifi
                            pip3 install -r requirements.txt
                            pip3 install safety bandit
                        '''
                        echo "Dependencies and tools installed"
                    }
                }
            }
        }
        stage('Run Tests') {
            steps {
                container('devops-agent') {
                    script {
                        echo "Running tests with coverage..."
                        sh '''
                            python3 -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
                        '''
                        echo "Tests completed"
                    }
                }
            }
            post {
                always {
                    script {
                        echo "Archiving test results..."
                        archiveArtifacts artifacts: 'htmlcov/**', allowEmptyArchive: true
                    }
                }
            }
        }
        stage('Security Scan') {
            steps {
                container('devops-agent') {
                    script {
                        echo "Running security scans..."
                        sh '''
                            echo "Checking for vulnerable dependencies..."
                            safety check
                            echo "Running static security analysis..."
                            bandit -r app/ -f json -o bandit-report.json || true
                        '''
                        echo "Security scan completed"
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'bandit-report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Build & Push Docker Image') {
            when {
                expression {
                    env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'develop'
                }
            }
            steps {
                container('devops-agent') {
                    script {
                        def imageTag = env.BUILD_NUMBER
                        def imageName = "${IMAGE_NAME}:${imageTag}"
                        def latestImage = "${IMAGE_NAME}:latest"

                        echo "Building Docker image locally: ${imageName}"
                        sh "docker build -t ${imageName} -t ${latestImage} ."
                        echo "Docker image created locally on Jenkins agent."
                        env.IMAGE_TAG = imageTag
                    }
                }
            }
        }

        stage('Deploy to Developer') {
            when {
                expression {
                    env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'develop'
                }
            }
            steps {
                container('devops-agent') {
                    script {
                        echo "Checking cluster connectivity and deploying..."
                        sh '''
                            echo "Using image: ${IMAGE_NAME}:${IMAGE_TAG}"
                            
                            echo "Checking helm version..."
                            helm version
                            
                            echo "Checking kubectl version..."
                            kubectl version --client
                            
                            echo "Checking available contexts..."
                            kubectl config get-contexts || echo "No contexts available"
                            
                            echo "Checking current context..."
                            kubectl config current-context || echo "No current context set"
                            
                            echo "Trying to set context to infra-cluster..."
                            kubectl config use-context infra-cluster || echo "Could not set context to infra-cluster"
                            
                            echo "Checking cluster info..."
                            kubectl cluster-info || echo "Could not connect to cluster"
                            
                            echo "Checking if namespace ${APP_NAMESPACE} exists..."
                            kubectl get namespace ${APP_NAMESPACE} || echo "Namespace ${APP_NAMESPACE} not found"
                            
                            echo "Deploying with helm..."
                            helm upgrade --install flask-app ./charts \
                                --namespace ${APP_NAMESPACE} \
                                --create-namespace \
                                --set image.tag=${IMAGE_TAG} \
                                --set image.repository=${IMAGE_NAME} \
                                --wait \
                                --timeout=5m
                        '''
                        echo "✅ Deployment completed"
                    }
                }
            }
        }

        stage('✅ Health Check') {
            when {
                expression {
                    env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'develop'
                }
            }
            steps {
                container('devops-agent') {
                    script {
                        echo "Running health checks..."
                        sh '''
                            echo "Setting kubectl context..."
                            kubectl config use-context infra-cluster || echo "Could not set context"
                            
                            echo "Aguardando deployment ficar pronto..."
                            kubectl wait --for=condition=available deployment/flask-app \
                                --namespace=${APP_NAMESPACE} \
                                --timeout=300s || echo "Wait failed"
                            
                            echo "Verificando health dos pods..."
                            kubectl get pods -n ${APP_NAMESPACE} -l app.kubernetes.io/name=flask-app || echo "Could not get pods"
                            
                            echo "Verificando serviços..."
                            kubectl get svc -n ${APP_NAMESPACE} || echo "Could not get services"
                            
                            echo "Verificando ingress..."
                            kubectl get ingress -n ${APP_NAMESPACE} || echo "Nenhum ingress encontrado"
                        '''
                        echo "Health check completed successfully!"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // Remove Python cache and test artifact directories before workspace cleanup
                container('devops-agent') {
                    sh '''
                        find . -type d -name "__pycache__" -exec rm -rf {} +
                        rm -rf .pytest_cache
                        rm -rf htmlcov
                    '''
                }
                // Limpa workspace
                deleteDir()
            }
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
